<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="baseline" value="0.2"/>

  <xacro:macro name="zed2_fisheye" 
               params="link_prefix:=''
                       joint_prefix:=''">

    <!-- Camera Center -->
    <link name="${link_prefix}zed2_camera_center">
      <inertial>
        <mass value="0.16140"/>
        <origin xyz="0 0 0"/>
        <inertia
          ixx="0.0003947" ixy="0.0" ixz="3.3365e-8"
          iyy="2.417e-5" iyz="0.0"
          izz="0.0003973"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="package://leo_erc_description/models/ZED2.dae"/>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <mesh filename="package://leo_erc_description/models/ZED2.dae"/>
        </geometry>
      </collision>
    </link>

    <!-- Left Camera -->
    <joint name="${joint_prefix}zed2_left_camera_joint" type="fixed">
      <parent link="${link_prefix}zed2_camera_center"/>
      <child link="${link_prefix}zed2_left_camera_frame"/>
      <origin xyz="0 ${baseline/2} 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_left_camera_frame" />

    <joint name="${joint_prefix}zed2_left_camera_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="-${pi/2} 0.0 -${pi/2}"/>
      <parent link="${link_prefix}zed2_left_camera_frame"/>
      <child link="${link_prefix}zed2_left_camera_optical_frame"/>
    </joint>

    <link name="${link_prefix}zed2_left_camera_optical_frame"/>

    <!-- Right Camera -->
    <joint name="${joint_prefix}zed2_right_camera_joint" type="fixed">
      <parent link="${link_prefix}zed2_camera_center"/>
      <child link="${link_prefix}zed2_right_camera_frame"/>
      <origin xyz="0 -${baseline/2} 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_right_camera_frame" />

    <joint name="${joint_prefix}zed2_right_camera_optical_joint" type="fixed">
      <origin xyz="0 0 0" rpy="-${pi/2} 0.0 -${pi/2}"/>
      <parent link="${link_prefix}zed2_right_camera_frame"/>
      <child link="${link_prefix}zed2_right_camera_optical_frame"/>
    </joint>

    <link name="${link_prefix}zed2_right_camera_optical_frame"/>

    <!-- Sensors -->
    <joint name="${joint_prefix}zed2_mag_joint" type="fixed">
      <parent link="${link_prefix}zed2_camera_center"/>
      <child link="${link_prefix}zed2_mag_link"/>
      <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_mag_link" />

    <joint name="${joint_prefix}zed2_baro_joint" type="fixed">
      <parent link="${link_prefix}zed2_camera_center"/>
      <child link="${link_prefix}zed2_baro_link"/>
      <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_baro_link" />

    <joint name="${joint_prefix}zed2_temp_left_joint" type="fixed">
      <parent link="${link_prefix}zed2_left_camera_frame"/>
      <child link="${link_prefix}zed2_temp_left_link"/>
      <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_temp_left_link" />

    <joint name="${joint_prefix}zed2_temp_right_joint" type="fixed">
        <parent link="${link_prefix}zed2_right_camera_frame"/>
        <child link="${link_prefix}zed2_temp_right_link"/>
        <origin xyz="0 0 0" rpy="0 0 0" />
    </joint>

    <link name="${link_prefix}zed2_temp_right_link" />

  </xacro:macro>


  <xacro:macro name="zed2_fisheye_gazebo"
               params="robot_ns:=''">

    <xacro:property name="link_prefix" value=""/>
    <xacro:if value="${robot_ns != '' and robot_ns != '/'}">
      <xacro:property name="link_prefix" value="${robot_ns}/"/>
    </xacro:if>

    <!-- Left Fisheye camera -->
    <gazebo reference="${link_prefix}zed2_left_camera_frame">
      <!-- Raw images (with lens distortion) -->
      <sensor name="camera_left" type="wideanglecamera">
        <always_on>true</always_on>
        <update_rate>30</update_rate>
        <camera name="leo_camera_left">
          <pose>0 0 0 0 0 0</pose>
          <horizontal_fov>6.2831</horizontal_fov>
          <image>
            <width>1696</width>
            <height>1696</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.15</near>
            <far>1500</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.0001</stddev>
          </noise>
          <lens>
            <type>custom</type> 
            <custom_function> <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
              <c1>1.0</c1>    <!-- linear scaling -->
              <c2>1.0</c2>       <!-- angle scaling -->
              <f>1.0</f>       <!-- one more scaling parameter -->
              <fun>id</fun>   <!-- one of sin,tan,id -->
              <c3>0.0</c3>
            </custom_function>  
            <scale_to_hfov>false</scale_to_hfov>  <!-- if it is set to `true` your horizontal FOV will ramain as defined, othervise it depends on lens type and custom function, if there is one -->
            <!-- clip everything that is outside of this angle -->
            <cutoff_angle>3.1415</cutoff_angle> <!-- it is usually FOV/2 -->
            <env_texture_size>1024</env_texture_size> <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
          </lens>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${robot_ns}</robotNamespace>
          <cameraName>/camera_left/fisheye</cameraName>
          <imageTopicName>fisheye_image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info_fisheye</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

    <!-- Right Fisheye camera -->
    <gazebo reference="${link_prefix}zed2_right_camera_frame">
      <sensor name="camera_right" type="wideanglecamera">
        <always_on>true</always_on>
        <update_rate>30</update_rate>
        <camera name="camera_right">
          <pose>0 0 0 0 0 0</pose>
          <horizontal_fov>3.141592</horizontal_fov>
          <image>
            <width>1696</width>
            <height>1696</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.15</near>
            <far>1500</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.0001</stddev>
          </noise>
          <lens>
            <type>custom</type> 
            <custom_function> <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
              <c1>1.0</c1>    <!-- linear scaling -->
              <c2>1.0</c2>       <!-- angle scaling -->
              <f>1.0</f>       <!-- one more scaling parameter -->
              <fun>id</fun>   <!-- one of sin,tan,id -->
              <c3>0.0</c3>
            </custom_function>
            <scale_to_hfov>false</scale_to_hfov>  <!-- if it is set to `true` your horizontal FOV will ramain as defined, othervise it depends on lens type and custom function, if there is one -->
            <!-- clip everything that is outside of this angle -->
            <cutoff_angle>1.570796</cutoff_angle> <!-- it is usually FOV/2 -->
            <env_texture_size>1024</env_texture_size> <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
          </lens>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${robot_ns}</robotNamespace>
          <cameraName>/camera_right/fisheye</cameraName>
          <imageTopicName>fisheye_image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info_fisheye</cameraInfoTopicName>
          <frameName>camera_link</frameName>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>
    
    <!-- Left/Depth camera -->
    <gazebo reference="${link_prefix}zed2_left_camera_frame">
      <!-- Raw images (with lens distortion) -->
      <sensor type="camera" name="zed2_left_raw_camera">
        <always_on>true</always_on>
        <update_rate>15.0</update_rate>
        <visualize>false</visualize> 
        <camera name="zed2_left_raw">
          <horizontal_fov>1.7633</horizontal_fov>
          <image>
            <width>1280</width>
            <height>720</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <distortion>
            <!-- Values copied from an actual ZED2 camera -->
            <k1>-0.043693598</k1>
            <k2>0.0146164996</k2>
            <p1>-0.006573319</p1>
            <p2>-0.000216900</p2>
            <k3>0.000084328</k3>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${robot_ns}</robotNamespace>
          <cameraName>/camera_left/pinhole</cameraName>
          <imageTopicName>image_raw_color</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>zed2_left_camera_optical_frame</frameName>
          <distortionK1>-0.043693598</distortionK1>
          <distortionK2>0.0146164996</distortionK2>
          <distortionT1>-0.006573319</distortionT1>
          <distortionT2>-0.000216900</distortionT2>
          <distortionK3>0.000084328</distortionK3>
          <CxPrime>648.5</CxPrime>
          <Cx>648.5</Cx>
          <Cy>366.8340148925781</Cy>
          <hackBaseline>0.0</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

    <!-- Right camera -->
    <gazebo reference="${link_prefix}zed2_right_camera_frame">
      <!-- Raw images (with lens distortion) -->
      <sensor type="camera" name="zed2_right_raw_camera">
        <always_on>true</always_on>
        <update_rate>15.0</update_rate>
        <visualize>false</visualize> 
        <camera name="zed2_right_raw">
          <horizontal_fov>1.7633</horizontal_fov>
          <image>
            <width>1280</width>
            <height>720</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.02</near>
            <far>300</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>0.007</stddev>
          </noise>
          <distortion>
            <k1>-0.040993299</k1>
            <k2>0.009593590</k2>
            <p1>-0.004429849</p1>
            <p2>0.000192024</p2>
            <k3>-0.000320880</k3>
            <center>0.5 0.5</center>
          </distortion>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${robot_ns}</robotNamespace>
          <cameraName>/camera_right/pinhole</cameraName>
          <imageTopicName>image_raw_color</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>zed2_right_camera_optical_frame</frameName>
          <distortionK1>-0.040993299</distortionK1>
          <distortionK2>0.009593590</distortionK2>
          <distortionT1>-0.004429849</distortionT1>
          <distortionT2>0.000192024</distortionT2>
          <distortionK3>-0.000320880</distortionK3>
          <CxPrime>659.3049926757812</CxPrime>
          <Cx>659.3049926757812</Cx>
          <Cy>371.39849853515625</Cy>
          <hackBaseline>0.12</hackBaseline>
        </plugin>
      </sensor>
    </gazebo>

    <!-- IMU -->
    <gazebo reference="${link_prefix}zed2_left_camera_frame">
      <sensor type="imu" name="zed2_imu_sensor">
        <update_rate>100</update_rate>
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <robotNamespace>${robot_ns}</robotNamespace>
          <topicName>zed2/imu/data</topicName>
          <frameName>zed2_imu_link</frameName>
          <updateRateHZ>100.0</updateRateHZ>
          <gaussianNoise>0.01</gaussianNoise>
          <initialOrientationAsReference>false</initialOrientationAsReference>
          <!-- IMU frame offset copied from an actual ZED2 camera -->
          <xyzOffset>-0.002 -0.023 -0.002</xyzOffset>
          <rpyOffset>0.0014025 -0.0000012 -0.0016915</rpyOffset>
        </plugin>
      </sensor>
    </gazebo>

  </xacro:macro>

</robot>
